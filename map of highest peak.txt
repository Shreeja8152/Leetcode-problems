import java.util.*;

public class Solution {
    public int[][] highestPeak(int[][] isWater) {
        int m = isWater.length;
        int n = isWater[0].length;
        int[][] height = new int[m][n];
        for (int[] row : height) {
            Arrays.fill(row, -1); // Initialize heights with -1
        }
         Queue<int[]> queue = new LinkedList<>();
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        
        // Add all water cells to the queue and set their height to 0
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (isWater[i][j] == 1) {
                    height[i][j] = 0;
                    queue.offer(new int[]{i, j});
                }
            }
        }
         // Perform BFS to determine heights
        while (!queue.isEmpty()) {
            int[] cell = queue.poll();
            int x = cell[0], y = cell[1];
            for (int[] dir : directions) {
                int nx = x + dir[0];
                int ny = y + dir[1];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n && height[nx][ny] == -1) {
                    height[nx][ny] = height[x][y] + 1;
                    queue.offer(new int[]{nx, ny});
                }
            }
        }
        
        return height;
    }
// Example usage
    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] isWater1 = {{0, 1}, {0, 0}};
        int[][] result1 = solution.highestPeak(isWater1);
        System.out.println(Arrays.deepToString(result1));
        // Output: [[1, 0], [2, 1]]
        
        int[][] isWater2 = {{0, 0, 1}, {1, 0, 0}, {0, 0, 0}};
        int[][] result2 = solution.highestPeak(isWater2);
        System.out.println(Arrays.deepToString(result2));
        // Output: [[1, 1, 0], [0, 1, 1], [1, 2, 2]]
    }
}